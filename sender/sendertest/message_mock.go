// Code generated by MockGen. DO NOT EDIT.
// Source: message.go

// Package sendertest is a generated GoMock package.
package sendertest

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	signer "github.com/mailchain/mailchain/internal/mailbox/signer"
	sender "github.com/mailchain/mailchain/sender"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMessage) Send(ctx context.Context, network string, to, from, data []byte, signer signer.Signer, opts sender.SendOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, network, to, from, data, signer, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMessageMockRecorder) Send(ctx, network, to, from, data, signer, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessage)(nil).Send), ctx, network, to, from, data, signer, opts)
}

// MockSendOpts is a mock of SendOpts interface.
type MockSendOpts struct {
	ctrl     *gomock.Controller
	recorder *MockSendOptsMockRecorder
}

// MockSendOptsMockRecorder is the mock recorder for MockSendOpts.
type MockSendOptsMockRecorder struct {
	mock *MockSendOpts
}

// NewMockSendOpts creates a new mock instance.
func NewMockSendOpts(ctrl *gomock.Controller) *MockSendOpts {
	mock := &MockSendOpts{ctrl: ctrl}
	mock.recorder = &MockSendOptsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendOpts) EXPECT() *MockSendOptsMockRecorder {
	return m.recorder
}
