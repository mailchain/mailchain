// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package substraterpctest is a generated GoMock package.
package substraterpctest

import (
	context "context"
	big "math/big"
	reflect "reflect"

	types "github.com/centrifuge/go-substrate-rpc-client/types"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockClient) Call(metadata *types.Metadata, to types.Address, gas *big.Int, data []byte) (types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", metadata, to, gas, data)
	ret0, _ := ret[0].(types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockClientMockRecorder) Call(metadata, to, gas, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClient)(nil).Call), metadata, to, gas, data)
}

// CreateSignatureOptions mocks base method.
func (m *MockClient) CreateSignatureOptions(blockHash, genesisHash types.Hash, mortalEra, immortalEra bool, rv types.RuntimeVersion, nonce, tip uint32) types.SignatureOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignatureOptions", blockHash, genesisHash, mortalEra, immortalEra, rv, nonce, tip)
	ret0, _ := ret[0].(types.SignatureOptions)
	return ret0
}

// CreateSignatureOptions indicates an expected call of CreateSignatureOptions.
func (mr *MockClientMockRecorder) CreateSignatureOptions(blockHash, genesisHash, mortalEra, immortalEra, rv, nonce, tip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignatureOptions", reflect.TypeOf((*MockClient)(nil).CreateSignatureOptions), blockHash, genesisHash, mortalEra, immortalEra, rv, nonce, tip)
}

// GetAddress mocks base method.
func (m *MockClient) GetAddress(accountID []byte) types.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", accountID)
	ret0, _ := ret[0].(types.Address)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockClientMockRecorder) GetAddress(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockClient)(nil).GetAddress), accountID)
}

// GetBlockHash mocks base method.
func (m *MockClient) GetBlockHash(blockNumber uint64) (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", blockNumber)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockClientMockRecorder) GetBlockHash(blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockClient)(nil).GetBlockHash), blockNumber)
}

// GetMetadata mocks base method.
func (m *MockClient) GetMetadata(blockHash types.Hash) (*types.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", blockHash)
	ret0, _ := ret[0].(*types.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockClientMockRecorder) GetMetadata(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockClient)(nil).GetMetadata), blockHash)
}

// GetNonce mocks base method.
func (m *MockClient) GetNonce(ctx context.Context, protocol, network string, addr []byte) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", ctx, protocol, network, addr)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockClientMockRecorder) GetNonce(ctx, protocol, network, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockClient)(nil).GetNonce), ctx, protocol, network, addr)
}

// GetRuntimeVersion mocks base method.
func (m *MockClient) GetRuntimeVersion(blockHash types.Hash) (*types.RuntimeVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeVersion", blockHash)
	ret0, _ := ret[0].(*types.RuntimeVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeVersion indicates an expected call of GetRuntimeVersion.
func (mr *MockClientMockRecorder) GetRuntimeVersion(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeVersion", reflect.TypeOf((*MockClient)(nil).GetRuntimeVersion), blockHash)
}

// NewExtrinsic mocks base method.
func (m *MockClient) NewExtrinsic(call types.Call) types.Extrinsic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewExtrinsic", call)
	ret0, _ := ret[0].(types.Extrinsic)
	return ret0
}

// NewExtrinsic indicates an expected call of NewExtrinsic.
func (mr *MockClientMockRecorder) NewExtrinsic(call interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewExtrinsic", reflect.TypeOf((*MockClient)(nil).NewExtrinsic), call)
}

// SubmitExtrinsic mocks base method.
func (m *MockClient) SubmitExtrinsic(extrinsic *types.Extrinsic) (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitExtrinsic", extrinsic)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitExtrinsic indicates an expected call of SubmitExtrinsic.
func (mr *MockClientMockRecorder) SubmitExtrinsic(extrinsic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitExtrinsic", reflect.TypeOf((*MockClient)(nil).SubmitExtrinsic), extrinsic)
}

// SuggestGasPrice mocks base method.
func (m *MockClient) SuggestGasPrice(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice.
func (mr *MockClientMockRecorder) SuggestGasPrice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockClient)(nil).SuggestGasPrice), ctx)
}
