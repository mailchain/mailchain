// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package datastoretest is a generated GoMock package.
package datastoretest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	datastore "github.com/mailchain/mailchain/cmd/internal/datastore"
	reflect "reflect"
)

// MockTransactionStore is a mock of TransactionStore interface
type MockTransactionStore struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionStoreMockRecorder
}

// MockTransactionStoreMockRecorder is the mock recorder for MockTransactionStore
type MockTransactionStoreMockRecorder struct {
	mock *MockTransactionStore
}

// NewMockTransactionStore creates a new mock instance
func NewMockTransactionStore(ctrl *gomock.Controller) *MockTransactionStore {
	mock := &MockTransactionStore{ctrl: ctrl}
	mock.recorder = &MockTransactionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionStore) EXPECT() *MockTransactionStoreMockRecorder {
	return m.recorder
}

// PutTransaction mocks base method
func (m *MockTransactionStore) PutTransaction(ctx context.Context, protocol, network string, hash []byte, tx *datastore.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTransaction", ctx, protocol, network, hash, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTransaction indicates an expected call of PutTransaction
func (mr *MockTransactionStoreMockRecorder) PutTransaction(ctx, protocol, network, hash, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTransaction", reflect.TypeOf((*MockTransactionStore)(nil).PutTransaction), ctx, protocol, network, hash, tx)
}

// GetTransactionsFrom mocks base method
func (m *MockTransactionStore) GetTransactionsFrom(ctx context.Context, protocol, network string, address []byte) ([]datastore.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsFrom", ctx, protocol, network, address)
	ret0, _ := ret[0].([]datastore.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsFrom indicates an expected call of GetTransactionsFrom
func (mr *MockTransactionStoreMockRecorder) GetTransactionsFrom(ctx, protocol, network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsFrom", reflect.TypeOf((*MockTransactionStore)(nil).GetTransactionsFrom), ctx, protocol, network, address)
}

// GetTransactionsTo mocks base method
func (m *MockTransactionStore) GetTransactionsTo(ctx context.Context, protocol, network string, address []byte) ([]datastore.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsTo", ctx, protocol, network, address)
	ret0, _ := ret[0].([]datastore.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsTo indicates an expected call of GetTransactionsTo
func (mr *MockTransactionStoreMockRecorder) GetTransactionsTo(ctx, protocol, network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsTo", reflect.TypeOf((*MockTransactionStore)(nil).GetTransactionsTo), ctx, protocol, network, address)
}

// MockRawTransactionStore is a mock of RawTransactionStore interface
type MockRawTransactionStore struct {
	ctrl     *gomock.Controller
	recorder *MockRawTransactionStoreMockRecorder
}

// MockRawTransactionStoreMockRecorder is the mock recorder for MockRawTransactionStore
type MockRawTransactionStoreMockRecorder struct {
	mock *MockRawTransactionStore
}

// NewMockRawTransactionStore creates a new mock instance
func NewMockRawTransactionStore(ctrl *gomock.Controller) *MockRawTransactionStore {
	mock := &MockRawTransactionStore{ctrl: ctrl}
	mock.recorder = &MockRawTransactionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRawTransactionStore) EXPECT() *MockRawTransactionStoreMockRecorder {
	return m.recorder
}

// PutRawTransaction mocks base method
func (m *MockRawTransactionStore) PutRawTransaction(ctx context.Context, protocol, network string, hash []byte, tx interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRawTransaction", ctx, protocol, network, hash, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutRawTransaction indicates an expected call of PutRawTransaction
func (mr *MockRawTransactionStoreMockRecorder) PutRawTransaction(ctx, protocol, network, hash, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRawTransaction", reflect.TypeOf((*MockRawTransactionStore)(nil).PutRawTransaction), ctx, protocol, network, hash, tx)
}
