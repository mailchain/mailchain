// Code generated by MockGen. DO NOT EDIT.
// Source: forward.go

// Package nameservicetest is a generated GoMock package.
package nameservicetest

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockForwardLookup is a mock of ForwardLookup interface.
type MockForwardLookup struct {
	ctrl     *gomock.Controller
	recorder *MockForwardLookupMockRecorder
}

// MockForwardLookupMockRecorder is the mock recorder for MockForwardLookup.
type MockForwardLookupMockRecorder struct {
	mock *MockForwardLookup
}

// NewMockForwardLookup creates a new mock instance.
func NewMockForwardLookup(ctrl *gomock.Controller) *MockForwardLookup {
	mock := &MockForwardLookup{ctrl: ctrl}
	mock.recorder = &MockForwardLookupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForwardLookup) EXPECT() *MockForwardLookupMockRecorder {
	return m.recorder
}

// ResolveName mocks base method.
func (m *MockForwardLookup) ResolveName(ctx context.Context, protocol, network, domainName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveName", ctx, protocol, network, domainName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveName indicates an expected call of ResolveName.
func (mr *MockForwardLookupMockRecorder) ResolveName(ctx, protocol, network, domainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveName", reflect.TypeOf((*MockForwardLookup)(nil).ResolveName), ctx, protocol, network, domainName)
}
