// Code generated by MockGen. DO NOT EDIT.
// Source: private.go

// Package cryptotest is a generated GoMock package.
package cryptotest

import (
	gomock "github.com/golang/mock/gomock"
	crypto "github.com/mailchain/mailchain/crypto"
	reflect "reflect"
)

// MockPrivateKey is a mock of PrivateKey interface
type MockPrivateKey struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateKeyMockRecorder
}

// MockPrivateKeyMockRecorder is the mock recorder for MockPrivateKey
type MockPrivateKeyMockRecorder struct {
	mock *MockPrivateKey
}

// NewMockPrivateKey creates a new mock instance
func NewMockPrivateKey(ctrl *gomock.Controller) *MockPrivateKey {
	mock := &MockPrivateKey{ctrl: ctrl}
	mock.recorder = &MockPrivateKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrivateKey) EXPECT() *MockPrivateKeyMockRecorder {
	return m.recorder
}

// Bytes mocks base method
func (m *MockPrivateKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockPrivateKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockPrivateKey)(nil).Bytes))
}

// PublicKey mocks base method
func (m *MockPrivateKey) PublicKey() crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey
func (mr *MockPrivateKeyMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockPrivateKey)(nil).PublicKey))
}

// Kind mocks base method
func (m *MockPrivateKey) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind
func (mr *MockPrivateKeyMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockPrivateKey)(nil).Kind))
}

// Sign mocks base method
func (m *MockPrivateKey) Sign(message []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", message)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockPrivateKeyMockRecorder) Sign(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPrivateKey)(nil).Sign), message)
}
