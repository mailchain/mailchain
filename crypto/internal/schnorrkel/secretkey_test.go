package schnorrkel

import (
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNewSecretKeyED25519(t *testing.T) {
	type args struct {
		seed [32]byte
	}
	tests := []struct {
		name string
		args args
		want SecretKey
	}{
		{
			"success-zero-seed",
			args{
				[32]byte{},
			},
			SecretKey{
				seed:  [32]uint8{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
				key:   [32]uint8{0xca, 0xa8, 0x35, 0x78, 0x1b, 0x15, 0xc7, 0x70, 0x6f, 0x65, 0xb7, 0x1f, 0x7a, 0x58, 0xc8, 0x7, 0xab, 0x36, 0xf, 0xae, 0xd6, 0x44, 0xf, 0xb2, 0x3e, 0xf, 0x4c, 0x52, 0xe9, 0x30, 0xde, 0xa},
				nonce: [32]uint8{0xa, 0x6a, 0x85, 0xea, 0xa6, 0x42, 0xda, 0xc8, 0x35, 0x42, 0x4b, 0x5d, 0x7c, 0x8d, 0x63, 0x7c, 0x0, 0x40, 0x8c, 0x7a, 0x73, 0xda, 0x67, 0x2b, 0x7f, 0x49, 0x85, 0x21, 0x42, 0xb, 0x6d, 0xd3},
			},
		},
		{
			"success-fac7959dbfe72f052e5a0c3c8d6530f202b02fd8f9f5ca3580ec8deb7797479e",
			args{
				[32]byte{0xfa, 0xc7, 0x95, 0x9d, 0xbf, 0xe7, 0x2f, 0x05, 0x2e, 0x5a, 0x0c, 0x3c, 0x8d, 0x65, 0x30, 0xf2, 0x02, 0xb0, 0x2f, 0xd8, 0xf9, 0xf5, 0xca, 0x35, 0x80, 0xec, 0x8d, 0xeb, 0x77, 0x97, 0x47, 0x9e},
			},
			SecretKey{
				seed:  [32]uint8{0xfa, 0xc7, 0x95, 0x9d, 0xbf, 0xe7, 0x2f, 0x5, 0x2e, 0x5a, 0xc, 0x3c, 0x8d, 0x65, 0x30, 0xf2, 0x2, 0xb0, 0x2f, 0xd8, 0xf9, 0xf5, 0xca, 0x35, 0x80, 0xec, 0x8d, 0xeb, 0x77, 0x97, 0x47, 0x9e},
				key:   [32]uint8{0x5, 0xd6, 0x55, 0x84, 0x63, 0xd, 0x16, 0xcd, 0x4a, 0xf6, 0xd0, 0xbe, 0xc1, 0xf, 0x34, 0xbb, 0x50, 0x4a, 0x5d, 0xcb, 0x62, 0xdb, 0xa2, 0x12, 0x2d, 0x49, 0xf5, 0xa6, 0x63, 0x76, 0x3d, 0xa},
				nonce: [32]uint8{0xfd, 0x19, 0xc, 0xce, 0x74, 0xdf, 0x35, 0x64, 0x32, 0xb4, 0x10, 0xbd, 0x64, 0x68, 0x23, 0x9, 0xd6, 0xde, 0xdb, 0x27, 0xc7, 0x68, 0x45, 0xda, 0xf3, 0x88, 0x55, 0x7c, 0xba, 0xc3, 0xca, 0x34},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewSecretKeyED25519(tt.args.seed); !assert.Equal(t, tt.want, got) {
				t.Errorf("NewSecretKeyED25519() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSecretKey_Key(t *testing.T) {
	type fields struct {
		seed  [32]byte
		key   [32]byte
		nonce [32]byte
	}
	tests := []struct {
		name   string
		fields fields
		want   []byte
	}{
		{
			"success",
			fields{
				[32]uint8{0xfa, 0xc7, 0x95, 0x9d, 0xbf, 0xe7, 0x2f, 0x5, 0x2e, 0x5a, 0xc, 0x3c, 0x8d, 0x65, 0x30, 0xf2, 0x2, 0xb0, 0x2f, 0xd8, 0xf9, 0xf5, 0xca, 0x35, 0x80, 0xec, 0x8d, 0xeb, 0x77, 0x97, 0x47, 0x9e},
				[32]uint8{0x5, 0xd6, 0x55, 0x84, 0x63, 0xd, 0x16, 0xcd, 0x4a, 0xf6, 0xd0, 0xbe, 0xc1, 0xf, 0x34, 0xbb, 0x50, 0x4a, 0x5d, 0xcb, 0x62, 0xdb, 0xa2, 0x12, 0x2d, 0x49, 0xf5, 0xa6, 0x63, 0x76, 0x3d, 0xa},
				[32]uint8{0xfd, 0x19, 0xc, 0xce, 0x74, 0xdf, 0x35, 0x64, 0x32, 0xb4, 0x10, 0xbd, 0x64, 0x68, 0x23, 0x9, 0xd6, 0xde, 0xdb, 0x27, 0xc7, 0x68, 0x45, 0xda, 0xf3, 0x88, 0x55, 0x7c, 0xba, 0xc3, 0xca, 0x34},
			},
			[]byte{0x5, 0xd6, 0x55, 0x84, 0x63, 0xd, 0x16, 0xcd, 0x4a, 0xf6, 0xd0, 0xbe, 0xc1, 0xf, 0x34, 0xbb, 0x50, 0x4a, 0x5d, 0xcb, 0x62, 0xdb, 0xa2, 0x12, 0x2d, 0x49, 0xf5, 0xa6, 0x63, 0x76, 0x3d, 0xa},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			sk := &SecretKey{
				seed:  tt.fields.seed,
				key:   tt.fields.key,
				nonce: tt.fields.nonce,
			}
			if got := sk.Key(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("SecretKey.Key() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSecretKey_Seed(t *testing.T) {
	type fields struct {
		seed  [32]byte
		key   [32]byte
		nonce [32]byte
	}
	tests := []struct {
		name   string
		fields fields
		want   []byte
	}{
		{
			"success",
			fields{
				[32]uint8{0xfa, 0xc7, 0x95, 0x9d, 0xbf, 0xe7, 0x2f, 0x5, 0x2e, 0x5a, 0xc, 0x3c, 0x8d, 0x65, 0x30, 0xf2, 0x2, 0xb0, 0x2f, 0xd8, 0xf9, 0xf5, 0xca, 0x35, 0x80, 0xec, 0x8d, 0xeb, 0x77, 0x97, 0x47, 0x9e},
				[32]uint8{0x5, 0xd6, 0x55, 0x84, 0x63, 0xd, 0x16, 0xcd, 0x4a, 0xf6, 0xd0, 0xbe, 0xc1, 0xf, 0x34, 0xbb, 0x50, 0x4a, 0x5d, 0xcb, 0x62, 0xdb, 0xa2, 0x12, 0x2d, 0x49, 0xf5, 0xa6, 0x63, 0x76, 0x3d, 0xa},
				[32]uint8{0xfd, 0x19, 0xc, 0xce, 0x74, 0xdf, 0x35, 0x64, 0x32, 0xb4, 0x10, 0xbd, 0x64, 0x68, 0x23, 0x9, 0xd6, 0xde, 0xdb, 0x27, 0xc7, 0x68, 0x45, 0xda, 0xf3, 0x88, 0x55, 0x7c, 0xba, 0xc3, 0xca, 0x34},
			},
			[]byte{0xfa, 0xc7, 0x95, 0x9d, 0xbf, 0xe7, 0x2f, 0x5, 0x2e, 0x5a, 0xc, 0x3c, 0x8d, 0x65, 0x30, 0xf2, 0x2, 0xb0, 0x2f, 0xd8, 0xf9, 0xf5, 0xca, 0x35, 0x80, 0xec, 0x8d, 0xeb, 0x77, 0x97, 0x47, 0x9e},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			sk := &SecretKey{
				seed:  tt.fields.seed,
				key:   tt.fields.key,
				nonce: tt.fields.nonce,
			}
			if got := sk.Seed(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("SecretKey.Seed() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSecretKey_Nonce(t *testing.T) {
	type fields struct {
		seed  [32]byte
		key   [32]byte
		nonce [32]byte
	}
	tests := []struct {
		name   string
		fields fields
		want   []byte
	}{
		{
			"success",
			fields{
				[32]uint8{0xfa, 0xc7, 0x95, 0x9d, 0xbf, 0xe7, 0x2f, 0x5, 0x2e, 0x5a, 0xc, 0x3c, 0x8d, 0x65, 0x30, 0xf2, 0x2, 0xb0, 0x2f, 0xd8, 0xf9, 0xf5, 0xca, 0x35, 0x80, 0xec, 0x8d, 0xeb, 0x77, 0x97, 0x47, 0x9e},
				[32]uint8{0x5, 0xd6, 0x55, 0x84, 0x63, 0xd, 0x16, 0xcd, 0x4a, 0xf6, 0xd0, 0xbe, 0xc1, 0xf, 0x34, 0xbb, 0x50, 0x4a, 0x5d, 0xcb, 0x62, 0xdb, 0xa2, 0x12, 0x2d, 0x49, 0xf5, 0xa6, 0x63, 0x76, 0x3d, 0xa},
				[32]uint8{0xfd, 0x19, 0xc, 0xce, 0x74, 0xdf, 0x35, 0x64, 0x32, 0xb4, 0x10, 0xbd, 0x64, 0x68, 0x23, 0x9, 0xd6, 0xde, 0xdb, 0x27, 0xc7, 0x68, 0x45, 0xda, 0xf3, 0x88, 0x55, 0x7c, 0xba, 0xc3, 0xca, 0x34},
			},
			[]byte{0xfd, 0x19, 0xc, 0xce, 0x74, 0xdf, 0x35, 0x64, 0x32, 0xb4, 0x10, 0xbd, 0x64, 0x68, 0x23, 0x9, 0xd6, 0xde, 0xdb, 0x27, 0xc7, 0x68, 0x45, 0xda, 0xf3, 0x88, 0x55, 0x7c, 0xba, 0xc3, 0xca, 0x34},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			sk := &SecretKey{
				seed:  tt.fields.seed,
				key:   tt.fields.key,
				nonce: tt.fields.nonce,
			}
			if got := sk.Nonce(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("SecretKey.Nonce() = %v, want %v", got, tt.want)
			}
		})
	}
}
