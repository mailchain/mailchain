// Code generated by MockGen. DO NOT EDIT.
// Source: receiver.go

// Package mailboxtest is a generated GoMock package.
package mailboxtest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	mailbox "github.com/mailchain/mailchain/internal/mailbox"
	reflect "reflect"
)

// MockReceiver is a mock of Receiver interface
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockRecorder
}

// MockReceiverMockRecorder is the mock recorder for MockReceiver
type MockReceiverMockRecorder struct {
	mock *MockReceiver
}

// NewMockReceiver creates a new mock instance
func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &MockReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReceiver) EXPECT() *MockReceiverMockRecorder {
	return m.recorder
}

// Receive mocks base method
func (m *MockReceiver) Receive(ctx context.Context, network string, address []byte) ([]mailbox.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx, network, address)
	ret0, _ := ret[0].([]mailbox.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive
func (mr *MockReceiverMockRecorder) Receive(ctx, network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockReceiver)(nil).Receive), ctx, network, address)
}
