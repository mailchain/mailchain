// Copyright 2019 Finobo
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package etherscan

import (
	"context"
	"errors"
	"github.com/mailchain/mailchain/crypto/cipher"
	"github.com/mailchain/mailchain/internal/mailbox"
	"github.com/stretchr/testify/assert"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestReceive(t *testing.T) {
	assert := assert.New(t)
	networkStackError := errors.New("Get http://somethignnotvalid:1334")
	type args struct {
		ctx     context.Context
		server  *httptest.Server
		network string
	}
	tests := []struct {
		name    string
		args    args
		wantErr error
		wantNil bool
		want    []mailbox.Transaction
	}{
		{
			"not-supported-network-error",
			args{
				context.Background(),
				func() *httptest.Server {
					s := httptest.NewServer(
						http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {}),
					)
					return s
				}(),
				"InvalidNetwork",
			},
			errors.New("network not supported"),
			true,
			nil,
		},
		{
			"network-error",
			args{
				context.Background(),
				func() *httptest.Server {
					s := httptest.NewServer(
						http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {}),
					)
					s.URL = "http://somethignnotvalid:1334"
					return s
				}(),
				"TestNetwork",
			},
			networkStackError,
			true,
			nil,
		},
		{
			"success-removes-invalid-trx",
			args{
				context.Background(),
				httptest.NewServer(
					http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
						txData := "{\"status\":\"1\",\"message\":\"OK\",\"result\":[{\"blockNumber\":\"65204\",\"timeStamp\":\"1439232889\",\"hash\":\"0x98beb27135aa0a25650557005ad962919d6a278c4b3dde7f4f6a3a1e65aa746c\",\"nonce\":\"0\",\"blockHash\":\"0x373d339e45a701447367d7b9c7cef84aab79c2b2714271b908cda0ab3ad0849b\",\"transactionIndex\":\"0\",\"from\":\"0x3fb1cd2cd96c6d5c0b5eb3322d807b34482481d4\",\"to\":\"0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae\",\"value\":\"0\",\"gas\":\"122261\",\"gasPrice\":\"50000000000\",\"isError\":\"0\",\"txreceipt_status\":\"\",\"input\":\"0x6d61696c636861696e383162336636383539326431393338396439656432346664636338316331666630323835383962653535303436303532366631633961613436623864333739346337653032616565363563386631373733376361366637333564393565303965366131396636303838366638313239326535373835373133343562386531653466393238326531306433396637316238636639653731613231656336393939333637346634616261643231623831393531646565346665643565666465663334643131303264346333336538626662613330623461343730646162643434653938653262363439346136653862363963393336353864393631393639356633313561356266356262313865363265336266623237363463363335323631616366363730303862353761316262333838353164396132656635353730323861336166373839646537396234346662346130336137653637393037343030376531623237\",\"contractAddress\":\"\",\"cumulativeGasUsed\":\"122207\",\"gasUsed\":\"122207\",\"confirmations\":\"8881309\"},{\"blockNumber\":\"65342\",\"timeStamp\":\"1439235315\",\"hash\":\"0x621de9a006b56c425d21ee0e04ab25866fff4cf606dd5d03cf677c5eb2172161\",\"nonce\":\"1\",\"blockHash\":\"0x889d18b8791f43688d07e0b588e94de746a020d4337c61e5285cd97556a6416e\",\"transactionIndex\":\"0\",\"from\":\"0x3fb1cd2cd96c6d5c0b5eb3322d807b34482481d4\",\"to\":\"0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae\",\"value\":\"0\",\"gas\":\"122269\",\"gasPrice\":\"50000000000\",\"isError\":\"0\",\"txreceipt_status\":\"\",\"input\":\"0xf00d4b5d00000000000000000000000005096a47749d8bfab0a90c1bb7a95115dbe4cea60000000000000000000000005ed8cee6b63b1c6afce3ad7c92f4fd7e1b8fad9f\",\"contractAddress\":\"\",\"cumulativeGasUsed\":\"122207\",\"gasUsed\":\"122207\",\"confirmations\":\"8881171\"}]}"
						w.Write([]byte(txData))
					}),
				),
				"TestNetwork",
			},
			nil,
			false,
			[]mailbox.Transaction{
				{
					Data:    cipher.EncryptedContent{0x38, 0x31, 0x62, 0x33, 0x66, 0x36, 0x38, 0x35, 0x39, 0x32, 0x64, 0x31, 0x39, 0x33, 0x38, 0x39, 0x64, 0x39, 0x65, 0x64, 0x32, 0x34, 0x66, 0x64, 0x63, 0x63, 0x38, 0x31, 0x63, 0x31, 0x66, 0x66, 0x30, 0x32, 0x38, 0x35, 0x38, 0x39, 0x62, 0x65, 0x35, 0x35, 0x30, 0x34, 0x36, 0x30, 0x35, 0x32, 0x36, 0x66, 0x31, 0x63, 0x39, 0x61, 0x61, 0x34, 0x36, 0x62, 0x38, 0x64, 0x33, 0x37, 0x39, 0x34, 0x63, 0x37, 0x65, 0x30, 0x32, 0x61, 0x65, 0x65, 0x36, 0x35, 0x63, 0x38, 0x66, 0x31, 0x37, 0x37, 0x33, 0x37, 0x63, 0x61, 0x36, 0x66, 0x37, 0x33, 0x35, 0x64, 0x39, 0x35, 0x65, 0x30, 0x39, 0x65, 0x36, 0x61, 0x31, 0x39, 0x66, 0x36, 0x30, 0x38, 0x38, 0x36, 0x66, 0x38, 0x31, 0x32, 0x39, 0x32, 0x65, 0x35, 0x37, 0x38, 0x35, 0x37, 0x31, 0x33, 0x34, 0x35, 0x62, 0x38, 0x65, 0x31, 0x65, 0x34, 0x66, 0x39, 0x32, 0x38, 0x32, 0x65, 0x31, 0x30, 0x64, 0x33, 0x39, 0x66, 0x37, 0x31, 0x62, 0x38, 0x63, 0x66, 0x39, 0x65, 0x37, 0x31, 0x61, 0x32, 0x31, 0x65, 0x63, 0x36, 0x39, 0x39, 0x39, 0x33, 0x36, 0x37, 0x34, 0x66, 0x34, 0x61, 0x62, 0x61, 0x64, 0x32, 0x31, 0x62, 0x38, 0x31, 0x39, 0x35, 0x31, 0x64, 0x65, 0x65, 0x34, 0x66, 0x65, 0x64, 0x35, 0x65, 0x66, 0x64, 0x65, 0x66, 0x33, 0x34, 0x64, 0x31, 0x31, 0x30, 0x32, 0x64, 0x34, 0x63, 0x33, 0x33, 0x65, 0x38, 0x62, 0x66, 0x62, 0x61, 0x33, 0x30, 0x62, 0x34, 0x61, 0x34, 0x37, 0x30, 0x64, 0x61, 0x62, 0x64, 0x34, 0x34, 0x65, 0x39, 0x38, 0x65, 0x32, 0x62, 0x36, 0x34, 0x39, 0x34, 0x61, 0x36, 0x65, 0x38, 0x62, 0x36, 0x39, 0x63, 0x39, 0x33, 0x36, 0x35, 0x38, 0x64, 0x39, 0x36, 0x31, 0x39, 0x36, 0x39, 0x35, 0x66, 0x33, 0x31, 0x35, 0x61, 0x35, 0x62, 0x66, 0x35, 0x62, 0x62, 0x31, 0x38, 0x65, 0x36, 0x32, 0x65, 0x33, 0x62, 0x66, 0x62, 0x32, 0x37, 0x36, 0x34, 0x63, 0x36, 0x33, 0x35, 0x32, 0x36, 0x31, 0x61, 0x63, 0x66, 0x36, 0x37, 0x30, 0x30, 0x38, 0x62, 0x35, 0x37, 0x61, 0x31, 0x62, 0x62, 0x33, 0x38, 0x38, 0x35, 0x31, 0x64, 0x39, 0x61, 0x32, 0x65, 0x66, 0x35, 0x35, 0x37, 0x30, 0x32, 0x38, 0x61, 0x33, 0x61, 0x66, 0x37, 0x38, 0x39, 0x64, 0x65, 0x37, 0x39, 0x62, 0x34, 0x34, 0x66, 0x62, 0x34, 0x61, 0x30, 0x33, 0x61, 0x37, 0x65, 0x36, 0x37, 0x39, 0x30, 0x37, 0x34, 0x30, 0x30, 0x37, 0x65, 0x31, 0x62, 0x32, 0x37},
					BlockID: []uint8{0x36, 0x35, 0x32, 0x30, 0x34},
					Hash:    []uint8{0x30, 0x78, 0x39, 0x38, 0x62, 0x65, 0x62, 0x32, 0x37, 0x31, 0x33, 0x35, 0x61, 0x61, 0x30, 0x61, 0x32, 0x35, 0x36, 0x35, 0x30, 0x35, 0x35, 0x37, 0x30, 0x30, 0x35, 0x61, 0x64, 0x39, 0x36, 0x32, 0x39, 0x31, 0x39, 0x64, 0x36, 0x61, 0x32, 0x37, 0x38, 0x63, 0x34, 0x62, 0x33, 0x64, 0x64, 0x65, 0x37, 0x66, 0x34, 0x66, 0x36, 0x61, 0x33, 0x61, 0x31, 0x65, 0x36, 0x35, 0x61, 0x61, 0x37, 0x34, 0x36, 0x63},
				},
			},
		},
		{
			"success-removes-empty-input-trx",
			args{
				context.Background(),
				httptest.NewServer(
					http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
						txData := "{\"status\":\"1\",\"message\":\"OK\",\"result\":[{\"blockNumber\":\"65204\",\"timeStamp\":\"1439232889\",\"hash\":\"0x98beb27135aa0a25650557005ad962919d6a278c4b3dde7f4f6a3a1e65aa746c\",\"nonce\":\"0\",\"blockHash\":\"0x373d339e45a701447367d7b9c7cef84aab79c2b2714271b908cda0ab3ad0849b\",\"transactionIndex\":\"0\",\"from\":\"0x3fb1cd2cd96c6d5c0b5eb3322d807b34482481d4\",\"to\":\"0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae\",\"value\":\"0\",\"gas\":\"122261\",\"gasPrice\":\"50000000000\",\"isError\":\"0\",\"txreceipt_status\":\"\",\"input\":\"0x6d61696c636861696e383162336636383539326431393338396439656432346664636338316331666630323835383962653535303436303532366631633961613436623864333739346337653032616565363563386631373733376361366637333564393565303965366131396636303838366638313239326535373835373133343562386531653466393238326531306433396637316238636639653731613231656336393939333637346634616261643231623831393531646565346665643565666465663334643131303264346333336538626662613330623461343730646162643434653938653262363439346136653862363963393336353864393631393639356633313561356266356262313865363265336266623237363463363335323631616366363730303862353761316262333838353164396132656635353730323861336166373839646537396234346662346130336137653637393037343030376531623237\",\"contractAddress\":\"\",\"cumulativeGasUsed\":\"122207\",\"gasUsed\":\"122207\",\"confirmations\":\"8881309\"},{\"blockNumber\":\"65204\",\"timeStamp\":\"1439232889\",\"hash\":\"0x98beb27135aa0a25650557005ad962919d6a278c4b3dde7f4f6a3a1e65a12345\",\"nonce\":\"0\",\"blockHash\":\"0x373d339e45a701447367d7b9c7cef84aab79c2b2714271b908cda0ab3ad0849b\",\"transactionIndex\":\"0\",\"from\":\"0x3fb1cd2cd96c6d5c0b5eb3322d807b34482481d4\",\"to\":\"0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae\",\"value\":\"0\",\"gas\":\"122261\",\"gasPrice\":\"50000000000\",\"isError\":\"0\",\"txreceipt_status\":\"\",\"input\":\"\",\"contractAddress\":\"\",\"cumulativeGasUsed\":\"122207\",\"gasUsed\":\"122207\",\"confirmations\":\"8881309\"}]}"
						w.Write([]byte(txData))
					}),
				),
				"TestNetwork",
			},
			nil,
			false,
			[]mailbox.Transaction{
				{
					Data:    cipher.EncryptedContent{0x38, 0x31, 0x62, 0x33, 0x66, 0x36, 0x38, 0x35, 0x39, 0x32, 0x64, 0x31, 0x39, 0x33, 0x38, 0x39, 0x64, 0x39, 0x65, 0x64, 0x32, 0x34, 0x66, 0x64, 0x63, 0x63, 0x38, 0x31, 0x63, 0x31, 0x66, 0x66, 0x30, 0x32, 0x38, 0x35, 0x38, 0x39, 0x62, 0x65, 0x35, 0x35, 0x30, 0x34, 0x36, 0x30, 0x35, 0x32, 0x36, 0x66, 0x31, 0x63, 0x39, 0x61, 0x61, 0x34, 0x36, 0x62, 0x38, 0x64, 0x33, 0x37, 0x39, 0x34, 0x63, 0x37, 0x65, 0x30, 0x32, 0x61, 0x65, 0x65, 0x36, 0x35, 0x63, 0x38, 0x66, 0x31, 0x37, 0x37, 0x33, 0x37, 0x63, 0x61, 0x36, 0x66, 0x37, 0x33, 0x35, 0x64, 0x39, 0x35, 0x65, 0x30, 0x39, 0x65, 0x36, 0x61, 0x31, 0x39, 0x66, 0x36, 0x30, 0x38, 0x38, 0x36, 0x66, 0x38, 0x31, 0x32, 0x39, 0x32, 0x65, 0x35, 0x37, 0x38, 0x35, 0x37, 0x31, 0x33, 0x34, 0x35, 0x62, 0x38, 0x65, 0x31, 0x65, 0x34, 0x66, 0x39, 0x32, 0x38, 0x32, 0x65, 0x31, 0x30, 0x64, 0x33, 0x39, 0x66, 0x37, 0x31, 0x62, 0x38, 0x63, 0x66, 0x39, 0x65, 0x37, 0x31, 0x61, 0x32, 0x31, 0x65, 0x63, 0x36, 0x39, 0x39, 0x39, 0x33, 0x36, 0x37, 0x34, 0x66, 0x34, 0x61, 0x62, 0x61, 0x64, 0x32, 0x31, 0x62, 0x38, 0x31, 0x39, 0x35, 0x31, 0x64, 0x65, 0x65, 0x34, 0x66, 0x65, 0x64, 0x35, 0x65, 0x66, 0x64, 0x65, 0x66, 0x33, 0x34, 0x64, 0x31, 0x31, 0x30, 0x32, 0x64, 0x34, 0x63, 0x33, 0x33, 0x65, 0x38, 0x62, 0x66, 0x62, 0x61, 0x33, 0x30, 0x62, 0x34, 0x61, 0x34, 0x37, 0x30, 0x64, 0x61, 0x62, 0x64, 0x34, 0x34, 0x65, 0x39, 0x38, 0x65, 0x32, 0x62, 0x36, 0x34, 0x39, 0x34, 0x61, 0x36, 0x65, 0x38, 0x62, 0x36, 0x39, 0x63, 0x39, 0x33, 0x36, 0x35, 0x38, 0x64, 0x39, 0x36, 0x31, 0x39, 0x36, 0x39, 0x35, 0x66, 0x33, 0x31, 0x35, 0x61, 0x35, 0x62, 0x66, 0x35, 0x62, 0x62, 0x31, 0x38, 0x65, 0x36, 0x32, 0x65, 0x33, 0x62, 0x66, 0x62, 0x32, 0x37, 0x36, 0x34, 0x63, 0x36, 0x33, 0x35, 0x32, 0x36, 0x31, 0x61, 0x63, 0x66, 0x36, 0x37, 0x30, 0x30, 0x38, 0x62, 0x35, 0x37, 0x61, 0x31, 0x62, 0x62, 0x33, 0x38, 0x38, 0x35, 0x31, 0x64, 0x39, 0x61, 0x32, 0x65, 0x66, 0x35, 0x35, 0x37, 0x30, 0x32, 0x38, 0x61, 0x33, 0x61, 0x66, 0x37, 0x38, 0x39, 0x64, 0x65, 0x37, 0x39, 0x62, 0x34, 0x34, 0x66, 0x62, 0x34, 0x61, 0x30, 0x33, 0x61, 0x37, 0x65, 0x36, 0x37, 0x39, 0x30, 0x37, 0x34, 0x30, 0x30, 0x37, 0x65, 0x31, 0x62, 0x32, 0x37},
					BlockID: []uint8{0x36, 0x35, 0x32, 0x30, 0x34},
					Hash:    []uint8{0x30, 0x78, 0x39, 0x38, 0x62, 0x65, 0x62, 0x32, 0x37, 0x31, 0x33, 0x35, 0x61, 0x61, 0x30, 0x61, 0x32, 0x35, 0x36, 0x35, 0x30, 0x35, 0x35, 0x37, 0x30, 0x30, 0x35, 0x61, 0x64, 0x39, 0x36, 0x32, 0x39, 0x31, 0x39, 0x64, 0x36, 0x61, 0x32, 0x37, 0x38, 0x63, 0x34, 0x62, 0x33, 0x64, 0x64, 0x65, 0x37, 0x66, 0x34, 0x66, 0x36, 0x61, 0x33, 0x61, 0x31, 0x65, 0x36, 0x35, 0x61, 0x61, 0x37, 0x34, 0x36, 0x63},
				},
			},
		},
		{
			"success-removes-duplicated-trx",
			args{
				context.Background(),
				httptest.NewServer(
					http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
						txData := "{\"status\":\"1\",\"message\":\"OK\",\"result\":[{\"blockNumber\":\"65204\",\"timeStamp\":\"1439232889\",\"hash\":\"0x98beb27135aa0a25650557005ad962919d6a278c4b3dde7f4f6a3a1e65aa746c\",\"nonce\":\"0\",\"blockHash\":\"0x373d339e45a701447367d7b9c7cef84aab79c2b2714271b908cda0ab3ad0849b\",\"transactionIndex\":\"0\",\"from\":\"0x3fb1cd2cd96c6d5c0b5eb3322d807b34482481d4\",\"to\":\"0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae\",\"value\":\"0\",\"gas\":\"122261\",\"gasPrice\":\"50000000000\",\"isError\":\"0\",\"txreceipt_status\":\"\",\"input\":\"0x6d61696c636861696e383162336636383539326431393338396439656432346664636338316331666630323835383962653535303436303532366631633961613436623864333739346337653032616565363563386631373733376361366637333564393565303965366131396636303838366638313239326535373835373133343562386531653466393238326531306433396637316238636639653731613231656336393939333637346634616261643231623831393531646565346665643565666465663334643131303264346333336538626662613330623461343730646162643434653938653262363439346136653862363963393336353864393631393639356633313561356266356262313865363265336266623237363463363335323631616366363730303862353761316262333838353164396132656635353730323861336166373839646537396234346662346130336137653637393037343030376531623237\",\"contractAddress\":\"\",\"cumulativeGasUsed\":\"122207\",\"gasUsed\":\"122207\",\"confirmations\":\"8881309\"},{\"hash\":\"0x98beb27135aa0a25650557005ad962919d6a278c4b3dde7f4f6a3a1e65aa746c\"}]}"
						w.Write([]byte(txData))
					}),
				),
				"TestNetwork",
			},
			nil,
			false,
			[]mailbox.Transaction{
				{
					Data:    cipher.EncryptedContent{0x38, 0x31, 0x62, 0x33, 0x66, 0x36, 0x38, 0x35, 0x39, 0x32, 0x64, 0x31, 0x39, 0x33, 0x38, 0x39, 0x64, 0x39, 0x65, 0x64, 0x32, 0x34, 0x66, 0x64, 0x63, 0x63, 0x38, 0x31, 0x63, 0x31, 0x66, 0x66, 0x30, 0x32, 0x38, 0x35, 0x38, 0x39, 0x62, 0x65, 0x35, 0x35, 0x30, 0x34, 0x36, 0x30, 0x35, 0x32, 0x36, 0x66, 0x31, 0x63, 0x39, 0x61, 0x61, 0x34, 0x36, 0x62, 0x38, 0x64, 0x33, 0x37, 0x39, 0x34, 0x63, 0x37, 0x65, 0x30, 0x32, 0x61, 0x65, 0x65, 0x36, 0x35, 0x63, 0x38, 0x66, 0x31, 0x37, 0x37, 0x33, 0x37, 0x63, 0x61, 0x36, 0x66, 0x37, 0x33, 0x35, 0x64, 0x39, 0x35, 0x65, 0x30, 0x39, 0x65, 0x36, 0x61, 0x31, 0x39, 0x66, 0x36, 0x30, 0x38, 0x38, 0x36, 0x66, 0x38, 0x31, 0x32, 0x39, 0x32, 0x65, 0x35, 0x37, 0x38, 0x35, 0x37, 0x31, 0x33, 0x34, 0x35, 0x62, 0x38, 0x65, 0x31, 0x65, 0x34, 0x66, 0x39, 0x32, 0x38, 0x32, 0x65, 0x31, 0x30, 0x64, 0x33, 0x39, 0x66, 0x37, 0x31, 0x62, 0x38, 0x63, 0x66, 0x39, 0x65, 0x37, 0x31, 0x61, 0x32, 0x31, 0x65, 0x63, 0x36, 0x39, 0x39, 0x39, 0x33, 0x36, 0x37, 0x34, 0x66, 0x34, 0x61, 0x62, 0x61, 0x64, 0x32, 0x31, 0x62, 0x38, 0x31, 0x39, 0x35, 0x31, 0x64, 0x65, 0x65, 0x34, 0x66, 0x65, 0x64, 0x35, 0x65, 0x66, 0x64, 0x65, 0x66, 0x33, 0x34, 0x64, 0x31, 0x31, 0x30, 0x32, 0x64, 0x34, 0x63, 0x33, 0x33, 0x65, 0x38, 0x62, 0x66, 0x62, 0x61, 0x33, 0x30, 0x62, 0x34, 0x61, 0x34, 0x37, 0x30, 0x64, 0x61, 0x62, 0x64, 0x34, 0x34, 0x65, 0x39, 0x38, 0x65, 0x32, 0x62, 0x36, 0x34, 0x39, 0x34, 0x61, 0x36, 0x65, 0x38, 0x62, 0x36, 0x39, 0x63, 0x39, 0x33, 0x36, 0x35, 0x38, 0x64, 0x39, 0x36, 0x31, 0x39, 0x36, 0x39, 0x35, 0x66, 0x33, 0x31, 0x35, 0x61, 0x35, 0x62, 0x66, 0x35, 0x62, 0x62, 0x31, 0x38, 0x65, 0x36, 0x32, 0x65, 0x33, 0x62, 0x66, 0x62, 0x32, 0x37, 0x36, 0x34, 0x63, 0x36, 0x33, 0x35, 0x32, 0x36, 0x31, 0x61, 0x63, 0x66, 0x36, 0x37, 0x30, 0x30, 0x38, 0x62, 0x35, 0x37, 0x61, 0x31, 0x62, 0x62, 0x33, 0x38, 0x38, 0x35, 0x31, 0x64, 0x39, 0x61, 0x32, 0x65, 0x66, 0x35, 0x35, 0x37, 0x30, 0x32, 0x38, 0x61, 0x33, 0x61, 0x66, 0x37, 0x38, 0x39, 0x64, 0x65, 0x37, 0x39, 0x62, 0x34, 0x34, 0x66, 0x62, 0x34, 0x61, 0x30, 0x33, 0x61, 0x37, 0x65, 0x36, 0x37, 0x39, 0x30, 0x37, 0x34, 0x30, 0x30, 0x37, 0x65, 0x31, 0x62, 0x32, 0x37},
					BlockID: []uint8{0x36, 0x35, 0x32, 0x30, 0x34},
					Hash:    []uint8{0x30, 0x78, 0x39, 0x38, 0x62, 0x65, 0x62, 0x32, 0x37, 0x31, 0x33, 0x35, 0x61, 0x61, 0x30, 0x61, 0x32, 0x35, 0x36, 0x35, 0x30, 0x35, 0x35, 0x37, 0x30, 0x30, 0x35, 0x61, 0x64, 0x39, 0x36, 0x32, 0x39, 0x31, 0x39, 0x64, 0x36, 0x61, 0x32, 0x37, 0x38, 0x63, 0x34, 0x62, 0x33, 0x64, 0x64, 0x65, 0x37, 0x66, 0x34, 0x66, 0x36, 0x61, 0x33, 0x61, 0x31, 0x65, 0x36, 0x35, 0x61, 0x61, 0x37, 0x34, 0x36, 0x63},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer tt.args.server.Close()
			client := &APIClient{
				key:            "api-key",
				networkConfigs: map[string]networkConfig{"TestNetwork": {url: tt.args.server.URL}},
			}
			got, err := client.Receive(tt.args.ctx, tt.args.network, []byte{})
			if (err != nil) && tt.wantErr == networkStackError && !strings.HasPrefix(err.Error(), networkStackError.Error()) {
				t.Errorf("APIClient.getTransactionsByAddress() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if (err != nil) && tt.wantErr != networkStackError && err.Error() != tt.wantErr.Error() {
				t.Errorf("APIClient.Receive() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if (got == nil) != tt.wantNil {
				t.Errorf("APIClient.Receive() nil = %v, wantNil %v", got == nil, tt.wantNil)
				return
			}
			if !assert.Equal(tt.want, got) {
				t.Errorf("APIClient.Receive() = %v, want %v", got, tt.want)
			}
		})
	}
}
