package bdbstore

import (
	"path"
	"testing"

	"github.com/mailchain/mailchain/internal/mail"
)

func TestDatabase_GetReadStatus(t *testing.T) {
	db, teardown, _ := setupDB(path.Join(getTempDir(), "bdb_test_read_status"))
	defer teardown()

	type args struct {
		messageID mail.ID
	}
	tests := []struct {
		name           string
		args           args
		wantStatusRead bool
		wantErr        bool
	}{
		{
			"success-key-0",
			args{
				[]byte{0x47, 0xec, 0xa0, 0x11, 0xe3, 0x2b, 0x52, 0xc7, 0x10, 0x5, 0xad, 0x8a, 0x8f, 0x75, 0xe1, 0xb4, 0x4c, 0x92, 0xc9, 0x9f, 0xd1, 0x2e, 0x43, 0xbc, 0xcf, 0xe5, 0x71, 0xe3, 0xc2, 0xd1, 0x3d, 0x2e, 0x9a, 0x82, 0x6a, 0x55, 0xf, 0x5f, 0xf6, 0x3b, 0x24, 0x7a, 0xf4, 0x71},
			},
			true,
			false,
		},
		{
			"success-key-1",
			args{
				[]byte{0x48, 0xed, 0xaf, 0x12, 0xe3, 0x2b, 0x52, 0xc7, 0x10, 0x5, 0xad, 0x8a, 0x8f, 0x75, 0xe1, 0xb4, 0x4c, 0x92, 0xc9, 0x9f, 0xd1, 0x2e, 0x43, 0xbc, 0xcf, 0xe5, 0x71, 0xe3, 0xc2, 0xd1, 0x3d, 0x2e, 0x9a, 0x82, 0x6a, 0x55, 0xf, 0x5f, 0xf6, 0x3b, 0x24, 0x7a, 0xf4, 0x71},
			},
			true,
			false,
		},
		{
			"err-invalid-key",
			args{
				[]byte{0x49, 0xef, 0xaf, 0x12, 0xe3, 0x2b, 0x52, 0xc7, 0x10, 0x5, 0xad, 0x8a, 0x8f, 0x75, 0xe1, 0xb4, 0x4c, 0x92, 0xc9, 0x9f, 0xd1, 0x2e, 0x43, 0xbc, 0xcf, 0xe5, 0x71, 0xe3, 0xc2, 0xd1, 0x3d, 0x2e, 0x9a, 0x82, 0x6a, 0x55, 0xf, 0x5f, 0xf6, 0x3b, 0x24, 0x7a, 0xf4, 0x71},
			},
			false,
			true,
		},
		{
			"err-invalid-value-length",
			args{
				[]byte{0x78, 0xed, 0xaf, 0x12, 0xe3, 0x2b, 0x52, 0xc7, 0x10, 0x5, 0xad, 0x8a, 0x8f, 0x75, 0xe1, 0xb4, 0x4c, 0x92, 0xc9, 0x9f, 0xd1, 0x2e, 0x43, 0xbc, 0xcf, 0xe5, 0x71, 0xe3, 0xc2, 0xd1, 0x3d, 0x2e, 0x9a, 0x82, 0x6a, 0x55, 0xf, 0x5f, 0xf6, 0x3b, 0x24, 0x7a, 0xf4, 0x71},
			},
			false,
			true,
		},
		{
			"success-key-3",
			args{
				nil,
			},
			true,
			false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			status, err := db.GetReadStatus(tt.args.messageID)

			if (err != nil) != tt.wantErr {
				t.Errorf("GetReadStatus() err = %v, want err %v", err, tt.wantErr)
			}

			if status != tt.wantStatusRead {
				t.Errorf("GetReadStatus() status = %v, want %v", status, tt.wantStatusRead)
			}
		})
	}
}

func TestDatabase_DeleteMessageRead(t *testing.T) {
	db, teardown, _ := setupDB(path.Join(getTempDir(), "bdb_test_delete_message"))
	defer teardown()

	type args struct {
		messageID mail.ID
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			"success-key-0",
			args{
				[]byte{0x47, 0xec, 0xa0, 0x11, 0xe3, 0x2b, 0x52, 0xc7, 0x10, 0x5, 0xad, 0x8a, 0x8f, 0x75, 0xe1, 0xb4, 0x4c, 0x92, 0xc9, 0x9f, 0xd1, 0x2e, 0x43, 0xbc, 0xcf, 0xe5, 0x71, 0xe3, 0xc2, 0xd1, 0x3d, 0x2e, 0x9a, 0x82, 0x6a, 0x55, 0xf, 0x5f, 0xf6, 0x3b, 0x24, 0x7a, 0xf4, 0x71},
			},
			false,
		},
		{
			"success-key-1",
			args{
				[]byte{0x48, 0xed, 0xaf, 0x12, 0xe3, 0x2b, 0x52, 0xc7, 0x10, 0x5, 0xad, 0x8a, 0x8f, 0x75, 0xe1, 0xb4, 0x4c, 0x92, 0xc9, 0x9f, 0xd1, 0x2e, 0x43, 0xbc, 0xcf, 0xe5, 0x71, 0xe3, 0xc2, 0xd1, 0x3d, 0x2e, 0x9a, 0x82, 0x6a, 0x55, 0xf, 0x5f, 0xf6, 0x3b, 0x24, 0x7a, 0xf4, 0x71},
			},
			false,
		},
		{
			"success-key-2",
			args{
				[]byte{0x49, 0xef, 0xaf, 0x12, 0xe3, 0x2b, 0x52, 0xc7, 0x10, 0x5, 0xad, 0x8a, 0x8f, 0x75, 0xe1, 0xb4, 0x4c, 0x92, 0xc9, 0x9f, 0xd1, 0x2e, 0x43, 0xbc, 0xcf, 0xe5, 0x71, 0xe3, 0xc2, 0xd1, 0x3d, 0x2e, 0x9a, 0x82, 0x6a, 0x55, 0xf, 0x5f, 0xf6, 0x3b, 0x24, 0x7a, 0xf4, 0x71},
			},
			false,
		},
		{
			"success-key-3",
			args{
				nil,
			},
			false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := db.DeleteMessageRead(tt.args.messageID); (err != nil) != tt.wantErr {
				t.Errorf("DeleteMessageRead() err = %v, want err %v", err, tt.wantErr)
			}
		})
	}
}

func TestDatabase_PutMessageRead(t *testing.T) {
	db, teardown, _ := setupDB(path.Join(getTempDir(), "bdb_test_put_message_read"))
	defer teardown()

	type args struct {
		messageID mail.ID
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			"success-key-0",
			args{
				[]byte{0x57, 0xac, 0xa0, 0x11, 0xe3, 0x2b, 0x52, 0xc7, 0x10, 0x5, 0xad, 0x8a, 0x8f, 0x75, 0xe1, 0xb4, 0x4c, 0x92, 0xc9, 0x9f, 0xd1, 0x2e, 0x43, 0xbc, 0xcf, 0xe5, 0x71, 0xe3, 0xc2, 0xd1, 0x3d, 0x2e, 0x9a, 0x82, 0x6a, 0x55, 0xf, 0x5f, 0xf6, 0x3b, 0x24, 0x7a, 0xf4, 0x71},
			},
			false,
		},
		{
			"success-key-1",
			args{
				[]byte{0x7a, 0xad, 0xff, 0x12, 0xe3, 0x2b, 0x52, 0xc7, 0x10, 0x5, 0xad, 0x8a, 0x8f, 0x75, 0xe1, 0xb4, 0x4c, 0x92, 0xc9, 0x9f, 0xd1, 0x2e, 0x43, 0xbc, 0xcf, 0xe5, 0x71, 0xe3, 0xc2, 0xd1, 0x3d, 0x2e, 0x9a, 0x82, 0x6a, 0x55, 0xf, 0x5f, 0xf6, 0x3b, 0x24, 0x7a, 0xf4, 0x71},
			},
			false,
		},
		{
			"success-key-2",
			args{
				[]byte{0x29, 0x1f, 0xef, 0xff, 0xe3, 0x2b, 0x52, 0xc7, 0x10, 0x5, 0xad, 0x8a, 0x8f, 0x75, 0xe1, 0xb4, 0x4c, 0x92, 0xc9, 0x9f, 0xd1, 0x2e, 0x43, 0xbc, 0xcf, 0xe5, 0x71, 0xe3, 0xc2, 0xd1, 0x3d, 0x2e, 0x9a, 0x82, 0x6a, 0x55, 0xf, 0x5f, 0xf6, 0x3b, 0x24, 0x7a, 0xf4, 0x71},
			},
			false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := db.PutMessageRead(tt.args.messageID); (err != nil) != tt.wantErr {
				t.Errorf("PutMessageRead() err = %v, want err %v", err, tt.wantErr)
			}
		})
	}
}
